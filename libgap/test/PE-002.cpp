/*
**  PE-001-02.cpp
**
*A  Ovidiu Podisor
*C  Copyright Â© 2021 innodocs. All rights reserved.
**
**  Project Euler Problem 2: Even Fibonacci numbers
**
**  Each new term in the Fibonacci sequence is generated by adding the previous
**  two terms. By starting with 1 and 2, the first 10 terms will be:
**
**     1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
**
**  By considering the terms in the Fibonacci sequence whose values do not
**  exceed four million, find the sum of the even-valued terms.
*/

#include <iostream>
#include <iomanip>
#include <math.h>
using namespace std;

#include "instant.h"
#include "gap/int.h"
using namespace Gap;

namespace Problem2
{

template<class T>
T solution1(const T& N)
{
  T sum = 0;

  T fib1 = 1;
  T fib2 = 2;
  while (fib2 <= N) {
    if (fib2 % 2 == 0)
      sum += fib2;

    T fib3 = fib1 + fib2;
    fib1 = fib2;
    fib2 = fib3;
  }

  return sum;
}

template<class T, int nrRuns>
void testHarness(const T& max,
            int wMax, int wSum, int wTime)
{
  T sum = 0;

  Instant start, end;
  start = Instant::now(); {
   for (int i = 0; i < nrRuns; i++)
     sum = solution1<T>(max);
  } end = Instant::now();

  double d = static_cast<double>(Duration::between(start, end).toNanos())
             / (1000000*nrRuns);
  cout << "sol 1 "
       << " | " << setw(wTime) << d
       << " | " << setw(wMax)  << max
       << " | " << setw(wSum)  << sum
       << endl;
}

}; /* namespace Problem2 */


int main(int argc, char *argv[])
{
  Gap::Init(argc, argv);

  const unsigned long MAX_CINT = 400000000000000000;
  const unsigned long GINT_MUL = 10000000000000;
  const Gap::Int      MAX_GINT = Gap::Int(MAX_CINT) * GINT_MUL;


  int wMax = log10(MAX_CINT)+log10(GINT_MUL) + 2;
  int wSum = wMax;
  int wTime = 10;

  cout << endl << "C::Int |||" << endl;
  for (unsigned long max = 4; max <= MAX_CINT; max *= 10)
    Problem2::testHarness<unsigned long, 10>(max, wMax, wSum, wTime);

  cout << endl << "Gap::Int |||" << endl;
  for (Gap::Int max = 4; max <= MAX_GINT; max *= 10)
    Problem2::testHarness<Gap::Int, 10>(max, wMax, wSum, wTime);

  return 0;
}
